#!/usr/bin/env php

<?php

require __DIR__ . '/vendor/autoload.php';

use BapCat\Persist\Drivers\Filesystem\FilesystemDriver;
use BapCat\Tailor\Tailor;
use BapCat\Tailor\PersistTemplateFinder;
use BapCat\Tailor\Compilers\PhpCompiler;
use Illuminate\Database\Capsule\Manager as Capsule;

// Grab filesystem directories
$persist = new FilesystemDriver(__DIR__ . '/templates');
$templates = $persist->get('/');
$compiled  = $persist->get('/');

// TemplateFinders are able to find and use raw/compiled templates
$finder = new PersistTemplateFinder($templates, $compiled);

// Compilers translate raw templates into compiled ones
$compiler = new PhpCompiler();

// Create an instance of Tailor to actually do the autoloading
$tailor = new Tailor($finder, $compiler);

$capsule = new Capsule();

$capsule->addConnection([
  'driver'    => 'mysql',
  'host'      => 'localhost',
  'database'  => 'test',
  'username'  => 'test',
  'password'  => 'test',
  'charset'   => 'utf8',
  'collation' => 'utf8_unicode_ci',
  'prefix'    => '',
]);

$capsule->setAsGlobal();

//-----------------------------------------------------------

use BapCat\Values\Identifier;
use BapCat\Values\Email;
use BapCat\Values\Text;

class CoolIdentifier extends Identifier {
  public function __construct($id) {
    $this->validate($id);
    parent::__construct($id);
  }
  
  private function validate($id) {
    if(filter_var($id, FILTER_VALIDATE_INT, ['options' => ['min_range' => 0]]) === false) {
      throw new InvalidArgumentException("Expected a valid ID, but got [$id] instead");
    }
  }
}

use BapCat\Remodel\Registry;
use BapCat\Remodel\EntityDefinition;
use BapCat\CoolThing\User;
use BapCat\CoolThing\UserGateway;

$registry = new Registry($tailor);

$def = (new EntityDefinition(User::class, 'users'))
  ->id('id', 'id', CoolIdentifier::class)
  ->required('email', 'email', Email::class)
  ->optional('first_name', 'first_name', Text::class)
  ->optional('last_name', 'last_name', Text::class)
  ->virtual('full_email', ['First_Name', "' '", 'Last_Name', "' <'", 'Email', "'>'"], Text::class)
  ->virtual('full_name', ['First_Name', "' '", 'Last_Name'], Text::class)
;

$registry->register($def);

$user = User::create(new Email('corey@narwhunderful.com'));
var_dump($user);

$repo = new UserGateway();
var_dump($repo);
var_dump($repo->query()
  ->select('id', 'email', 'full_email', 'first_name', 'last_name', 'full_name')
  ->get()
);
