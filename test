#!/usr/bin/env php

<?php

require __DIR__ . '/vendor/autoload.php';

use BapCat\Persist\Drivers\Filesystem\FilesystemDriver;
use BapCat\Tailor\Tailor;
use BapCat\Tailor\PersistTemplateFinder;
use BapCat\Tailor\Compilers\PhpCompiler;

// Grab filesystem directories
$persist = new FilesystemDriver(__DIR__ . '/templates');
$templates = $persist->get('/');
$compiled  = $persist->get('/');

// TemplateFinders are able to find and use raw/compiled templates
$finder = new PersistTemplateFinder($templates, $compiled);

// Compilers translate raw templates into compiled ones
$compiler = new PhpCompiler();

// Create an instance of Tailor to actually do the autoloading
$tailor = new Tailor($finder, $compiler);

//-----------------------------------------------------------

use BapCat\Values\Identifier;
use BapCat\Values\Email;

class CoolIdentifier extends Identifier {
    public function __construct($id) {
        $this->validate($id);
        parent::__construct($id);
    }
    
    private function validate($id) {
        if(filter_var($id, FILTER_VALIDATE_INT, ['options' => ['min_range' => 0]]) === false) {
            throw new InvalidArgumentException("Expected a valid ID, but got [$id] instead");
        }
    }
}

use BapCat\Remodel\Registry;
use BapCat\Remodel\EntityBuilder;
use BapCat\CoolThing\User;

$registry = new Registry($tailor);

$registry->register(
  User::class,
  (new EntityBuilder('id', 'id', CoolIdentifier::class))
    ->required('email', 'email', Email::class)
);

$user = User::create(new Email('corey@narwhunderful.com'));
var_dump($user);
